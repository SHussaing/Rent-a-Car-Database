-- Procedure that calculates total rental Amount and creates a new invoice record for that rental
CREATE OR REPLACE PROCEDURE PR_CREATE_RENTAL_INVOICE (RENTALID IN NUMBER,DIS_RATE IN NUMBER,PAY_METHOD IN VARCHAR)
AS
START_DATE DATE;
END_DATE DATE;
ACTUAL_END_DATE DATE;
CARID NUMBER;
CAR_HIRE_RATE NUMBER;
LATE_RATE NUMBER;
EX_EQUIPMENT_COST NUMBER := 0;
R_DURATION NUMBER;
RENTAL_COST NUMBER:=0;
LATE_DURATION NUMBER:=0;
LATE_AMOUNT NUMBER := 0; 
TOTAL_AMOUNT NUMBER := 0;
VAT_RATE NUMBER :=0.1;
TOTAL_P_AMOUNT NUMBER:=0;
PAY_STATUS VARCHAR2(50):='Completed';
PAYMENT_DATE DATE;
BEGIN

    SELECT RENTAL_START_DATE,RENTAL_END_DATE,ACTUAL_RETURN_DATE,CAR_ID INTO START_DATE,END_DATE,ACTUAL_END_DATE,CARID
    FROM RENTAL WHERE RENTALID = RENTAL_ID;
    IF (PAY_METHOD IS NULL) THEN
    PAY_STATUS := 'Pending';
    PAYMENT_DATE := NULL;
    ELSE 
    PAYMENT_DATE := ACTUAL_END_DATE;
    END IF;
    SELECT CAR_DAILY_HIRE_RATE,CAR_DAILY_PENALTY_RATE INTO CAR_HIRE_RATE,LATE_RATE
    FROM CAR WHERE CARID = CAR_ID;
    
    R_DURATION:= CALCULATE_DURATION(START_DATE,ACTUAL_END_DATE);
    RENTAL_COST:= CALCULATE_RENTAL_COST (R_DURATION,CAR_HIRE_RATE);
    EX_EQUIPMENT_COST := CALCUALTE_EX_EQUIPMENT_COST (RENTALID);
    
    IF (ACTUAL_END_DATE > END_DATE ) THEN
    LATE_DURATION:= CALCULATE_DURATION (END_DATE,ACTUAL_END_DATE);
    LATE_AMOUNT := CALCULATE_LATE_PENANLTY_COST (LATE_DURATION,LATE_RATE);  
    END IF;
    TOTAL_AMOUNT := RENTAL_COST+EX_EQUIPMENT_COST+LATE_AMOUNT;
    TOTAL_P_AMOUNT := CALCUALTE_COST_AFTER_DISCOUNT (TOTAL_AMOUNT,DIS_RATE);
    TOTAL_P_AMOUNT := CALCUALTE_COST_AFTER_VAT (TOTAL_P_AMOUNT,VAT_RATE);
    
    INSERT INTO INVOICE VALUES (InvoiceID_SEQ.NEXTVAL,RENTALID,RENTAL_COST,EX_EQUIPMENT_COST,
    LATE_AMOUNT,TOTAL_AMOUNT,DIS_RATE,VAT_RATE,TOTAL_P_AMOUNT,PAY_STATUS,PAY_METHOD,PAYMENT_DATE);
    
END PR_CREATE_RENTAL_INVOICE;
/

-- Procedure that updates extra equipment stock when rental starts/ends
CREATE OR REPLACE PROCEDURE PR_UPDATE_EXTRA_EQUIPMENT_STOCK(RENTAL_STARTED IN BOOLEAN ,RENTALID IN NUMBER)
AS
    CURSOR CURSOR_EXTRA_EQUIP IS 
    SELECT RE.EQUIPMENT_ID,RE.QUANTITY,E.EQUIPMENT_STOCK
    FROM RENTAL_EQUIPMENT RE, EXTRA_EQUIPMENT E
    WHERE RE.EQUIPMENT_ID = E.EQUIPMENT_ID AND
    RENTALID  = RE.RENTAL_ID;
    V_NEW_QUANTITY NUMBER;
BEGIN
    FOR EQUIPMENT_RECORD IN CURSOR_EXTRA_EQUIP
    LOOP
        IF (RENTAL_STARTED) THEN
        V_NEW_QUANTITY := EQUIPMENT_RECORD.EQUIPMENT_STOCK - EQUIPMENT_RECORD.QUANTITY;
        UPDATE EXTRA_EQUIPMENT SET EQUIPMENT_STOCK = V_NEW_QUANTITY WHERE EQUIPMENT_RECORD.EQUIPMENT_ID = EXTRA_EQUIPMENT.EQUIPMENT_ID;
        ELSE 
        V_NEW_QUANTITY := EQUIPMENT_RECORD.EQUIPMENT_STOCK + EQUIPMENT_RECORD.QUANTITY;
        UPDATE EXTRA_EQUIPMENT SET EQUIPMENT_STOCK = V_NEW_QUANTITY WHERE EQUIPMENT_RECORD.EQUIPMENT_ID = EXTRA_EQUIPMENT.EQUIPMENT_ID;
        END IF;
    END LOOP;
END PR_UPDATE_EXTRA_EQUIPMENT_STOCK;
/
-- Procedure that generates customer classification report based on total rentals amount
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE PR_CUSTOMERS_CLASSIFICATION_REPORT
AS
    CURSOR CUSTOMER_CURSOR IS
    SELECT C.CUSTOMER_FIRST_NAME||' '||C.CUSTOMER_LAST_NAME "CUSTOMER NAME", SUM(I.TOTAL_PAYABLE_AMOUNT) SUBTOTAL
    FROM CUSTOMER C JOIN RENTAL R ON C.CUSTOMER_ID = R.CUSTOMER_ID JOIN INVOICE I ON R.RENTAL_ID = I.RENTAL_ID 
    GROUP BY C.CUSTOMER_FIRST_NAME,C.CUSTOMER_LAST_NAME
    ORDER BY SUBTOTAL DESC;
    V_BEST_CUSTOMER NUMBER :=0;
    V_MEDIUM_CUSTOMER NUMBER :=0;
    V_ORDINARY_CUSTOMER NUMBER:=0;
BEGIN
    DBMS_OUTPUT.PUT_LINE('BEST CUSTOMERS *** ');
    FOR c_record in CUSTOMER_CURSOR LOOP
        IF c_record.SUBTOTAL > 1000 THEN
        V_BEST_CUSTOMER := V_BEST_CUSTOMER +1;
        DBMS_OUTPUT.PUT_LINE(V_BEST_CUSTOMER ||'.'||c_record."CUSTOMER NAME");
        END IF;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('');
    DBMS_OUTPUT.PUT_LINE('MEDIUM CUSTOMERS ** ');
    FOR c_record in CUSTOMER_CURSOR LOOP
        IF c_record.SUBTOTAL BETWEEN 500 AND 1000 THEN
        V_MEDIUM_CUSTOMER := V_MEDIUM_CUSTOMER +1;
        DBMS_OUTPUT.PUT_LINE(V_MEDIUM_CUSTOMER ||'.'||c_record."CUSTOMER NAME");
        END IF;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('');
    DBMS_OUTPUT.PUT_LINE('ORDINARY CUSTOMERS * ');
    FOR c_record in CUSTOMER_CURSOR LOOP
        IF c_record.SUBTOTAL <500 THEN
        V_ORDINARY_CUSTOMER := V_ORDINARY_CUSTOMER +1;
        DBMS_OUTPUT.PUT_LINE(V_ORDINARY_CUSTOMER ||'.'||c_record."CUSTOMER NAME");
        END IF;
    END LOOP;
END;
/
CALL PR_CUSTOMERS_CLASSIFICATION_REPORT();


--Procedure that allows customer to search for a car based on car category
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE PR_SEARCH_CAR (CAR_CATEGORYID IN CHAR)
AS
    CURSOR CAR_LIST IS 
    SELECT M.MODEL_NAME AS "MODEL", C.CAR_YEAR_MANUFACTURED AS "YEAR", C.CAR_COLOR AS "COLOR", C.CAR_DAILY_HIRE_RATE AS "RATE", L.LOCATION_CITY AS "LOCATION"
    FROM "LOCATION" L 
    JOIN CAR C ON L.LOCATION_ID = C.LOCATION_ID
    JOIN CAR_MODEL M ON C.MODEL_ID = M.MODEL_ID 
    JOIN CAR_CATEGORY CA ON CA.CAR_CATEGORY_ID = M.CAR_CATEGORY_ID
    WHERE CA.CAR_CATEGORY_ID = CAR_CATEGORYID;
          
    CAR_NUM NUMBER := 0;
BEGIN
    FOR CAR_RECORD IN CAR_LIST LOOP
        CAR_NUM := CAR_NUM + 1;
        DBMS_OUTPUT.PUT_LINE(CAR_NUM || '. MODEL: ' || CAR_RECORD.MODEL || ', YEAR MANUFACTURED: ' || CAR_RECORD.YEAR || ', COLOR: ' || CAR_RECORD.COLOR || ', LOCATION: ' || CAR_RECORD.LOCATION);
    END LOOP;
END;
/
CALL PR_SEARCH_CAR('SUV');

-- Procedure to insert an insurance record for a car.
CREATE OR REPLACE PROCEDURE PR_ADD_INSURANCE
(
    CAR_ID IN INSURANCE_HISTORY.CAR_ID%TYPE,
    COMPANY IN INSURANCE_HISTORY.INSURANCE_COMPANY%TYPE,
    DUE_DATE IN INSURANCE_HISTORY.INSURANCE_DUE_DATE%TYPE DEFAULT ADD_MONTHS(SYSDATE, 12),
    COST IN INSURANCE_HISTORY.INSURANCE_COST%TYPE,
    TYPE IN INSURANCE_HISTORY.INSURANCE_TYPE%TYPE
) AS
BEGIN
    INSERT INTO INSURANCE_HISTORY VALUES(InsuranceHistory_SEQ.NEXTVAL,CAR_ID,COMPANY,SYSDATE,DUE_DATE,COST,TYPE);
    DBMS_OUTPUT.PUT_LINE('New insurance record added to the car with the ID : ' || CAR_ID);
END PR_ADD_INSURANCE;
/

-- Procedure to update last maintenance record for a car
CREATE OR REPLACE PROCEDURE PR_UPDATE_MAINTENANCE_RECORD
(
    CARID IN MAINTENANCE_HISTORY.CAR_ID%TYPE,
    COST IN MAINTENANCE_HISTORY.MAINTENANCE_COST%TYPE,
    DESCRIPTION IN MAINTENANCE_HISTORY.MAINTENANCE_DESCRIPTION%TYPE,
    PLACE IN MAINTENANCE_HISTORY.MAINTENANCE_PLACE%TYPE
) AS
MAINT_ID MAINTENANCE_HISTORY.MAINTENANCE_ID%TYPE;
BEGIN
    SELECT MAX(MAINTENANCE_ID)INTO MAINT_ID FROM MAINTENANCE_HISTORY WHERE CAR_ID = CARID;
    UPDATE MAINTENANCE_HISTORY SET MAINTENANCE_COST = COST, MAINTENANCE_DESCRIPTION = DESCRIPTION,MAINTENANCE_PLACE = PLACE
    WHERE MAINTENANCE_ID = MAINT_ID;
    DBMS_OUTPUT.PUT_LINE('MAINTENANCE RECORD ' || MAINT_ID ||' HAS BEEN UPDATED SUCCESFULLY');
END PR_UPDATE_MAINTENANCE_RECORD;
/
















