-- A trigger that updates car status when the rental started/completed
CREATE OR REPLACE TRIGGER TR_UPDATE_CAR_STATUS 
AFTER UPDATE OF RENTAL_STATUS ON RENTAL
FOR EACH ROW
DECLARE
CARID RENTAL.CAR_ID%TYPE := :NEW.CAR_ID;
BEGIN
    IF (:OLD.RENTAL_STATUS ='Confirmed' AND :NEW.RENTAL_STATUS ='On-going') THEN    
        UPDATE CAR SET CAR_STATUS = 'Rented' WHERE CARID = CAR.CAR_ID;
            
    ELSIF (:OLD.RENTAL_STATUS = 'On-going' AND :NEW.RENTAL_STATUS = 'Completed') THEN
        UPDATE CAR SET CAR_STATUS = 'Available' WHERE CARID = CAR.CAR_ID;
    END IF;
END;
/

-- A trigger that creates a maintenance record when the car status changes to 'Under Maintenance'
CREATE OR REPLACE TRIGGER TR_CREATE_MAINTENANCE_RECORD 
AFTER UPDATE OF CAR_STATUS ON CAR
FOR EACH ROW
DECLARE
CARID       CAR.CAR_ID%TYPE := :NEW.CAR_ID;
BEGIN
    IF (:OLD.CAR_STATUS = 'Available' AND :NEW.CAR_STATUS = 'Under Maintenance') THEN
        INSERT INTO MAINTENANCE_HISTORY(MAINTENANCE_ID,CAR_ID,MAINTENANCE_DATE)
        VALUES(MaintenanceHistory_SEQ.NEXTVAL,CARID,SYSDATE);
    END IF;
END;
/

--A trigger that updates Extra Equipment stock when rental started/completed
CREATE OR REPLACE TRIGGER TR_UPDATE_EXTRA_EQUIPMENT_STOCK
BEFORE UPDATE OF RENTAL_STATUS ON RENTAL
FOR EACH ROW
DECLARE
BEGIN
    IF (:OLD.RENTAL_STATUS = 'Confirmed' AND :NEW.RENTAL_STATUS ='On-going') THEN
      PR_UPDATE_EXTRA_EQUIPMENT_STOCK (TRUE,:NEW.RENTAL_ID);
      ELSIF (:OLD.RENTAL_STATUS = 'On-going' AND :NEW.RENTAL_STATUS ='Completed') THEN
      PR_UPDATE_EXTRA_EQUIPMENT_STOCK (FALSE,:NEW.RENTAL_ID);
    END IF;
END;
/

--A trigger that updates actual return date when rental is completed
CREATE OR REPLACE TRIGGER TR_RENTAL_COMPLETED
BEFORE UPDATE OF RENTAL_STATUS ON RENTAL
FOR EACH ROW
BEGIN
    IF (:OLD.RENTAL_STATUS = 'On-going' AND :NEW.RENTAL_STATUS ='Completed') THEN
        :NEW.ACTUAL_RETURN_DATE := SYSDATE;
    END IF;
END;
/

--A trigger that sets Employee Email when employee record is inserted
CREATE OR REPLACE TRIGGER EMPLOYEE_EMAIL_TR
BEFORE INSERT ON EMPLOYEE
FOR EACH ROW
DECLARE
    EMP_EMAIL EMPLOYEE.EMPLOYEE_EMAIL%TYPE;
    EMP_FNAME EMPLOYEE.EMPLOYEE_FIRST_NAME%TYPE;
    EMP_LNAME EMPLOYEE.EMPLOYEE_LAST_NAME%TYPE;
BEGIN
    EMP_FNAME := LOWER(:NEW.EMPLOYEE_FIRST_NAME);
    EMP_LNAME := LOWER(:NEW.EMPLOYEE_LAST_NAME);
    EMP_EMAIL := (EMP_FNAME || '.' || EMP_LNAME || '@cheaprent.bh');
    :NEW.EMPLOYEE_EMAIL := EMP_EMAIL;
END;
/


-- A trigger that generates rental ID when new rental record is inserted
CREATE OR REPLACE TRIGGER TR_GENERATE_RENTAL_ID
BEFORE INSERT ON RENTAL
FOR EACH ROW
BEGIN
SELECT RentalID_SEQ.NEXTVAL INTO :NEW.RENTAL_ID FROM dual;
END TR_GENERATE_RENTAL_ID;
/

--A trigger that move rental data to archive table
CREATE TABLE RENTAL_ARCHIVE AS SELECT * FROM RENTAL WHERE 0=1;

CREATE OR REPLACE TRIGGER TR_ARCHIVE_RENTAL_DATA
AFTER UPDATE OF RENTAL_STATUS ON RENTAL
FOR EACH ROW
DECLARE

BEGIN
    IF (:OLD.RENTAL_STATUS = 'Confirmed' AND :NEW.RENTAL_STATUS = 'Cancelled') 
     OR (:OLD.RENTAL_STATUS = 'On-going' AND :NEW.RENTAL_STATUS = 'Completed') THEN
        INSERT INTO RENTAL_ARCHIVE VALUES
        (:NEW.RENTAL_ID,:NEW.CUSTOMER_ID,:NEW.CAR_ID,:NEW.RENTAL_START_DATE,:NEW.RENTAL_END_DATE,:NEW.ACTUAL_RETURN_DATE,:NEW.RENTAL_STATUS);
    END IF;
END;
/











