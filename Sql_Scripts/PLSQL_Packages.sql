-- Package Specification For EMP_PKG -- 
CREATE OR REPLACE PACKAGE EMP_PKG AS
PROCEDURE AddEmployee
(
EMP_CPR  EMPLOYEE.EMPLOYEE_CPR%TYPE,
EMP_FIRST_NAME  EMPLOYEE.EMPLOYEE_FIRST_NAME%TYPE,
EMP_LAST_NAME  EMPLOYEE.EMPLOYEE_LAST_NAME%TYPE,
EMP_DOB  EMPLOYEE.EMPLOYEE_DOB%TYPE DEFAULT SYSDATE,
EMP_PHONE_NUMBER  EMPLOYEE.EMPLOYEE_PHONE_NUMBER%TYPE DEFAULT 'N/A',
EMP_EMAIL  EMPLOYEE.EMPLOYEE_EMAIL%TYPE DEFAULT 'N/A',
EMP_BLD  EMPLOYEE.EMPLOYEE_BLD%TYPE DEFAULT 00000,
EMP_STREET  EMPLOYEE.EMPLOYEE_STREET%TYPE DEFAULT 'N/A',
EMP_BLOCK  EMPLOYEE.EMPLOYEE_BLOCK%TYPE DEFAULT 'N/A',
EMP_CITY  EMPLOYEE.EMPLOYEE_CITY%TYPE DEFAULT 'N/A',
LOC_ID  EMPLOYEE.LOCATION_ID%TYPE ,
EMP_HIRE_DATE  EMPLOYEE.EMPLOYEE_HIRE_DATE%TYPE DEFAULT SYSDATE,
JOB_TITLE  EMPLOYEE.JOB_TITLE%TYPE DEFAULT 'N/A',
EMP_SALARY  EMPLOYEE.EMPLOYEE_SALARY%TYPE    
);

PROCEDURE DeleteEmployee(EMP_ID EMPLOYEE.EMPLOYEE_ID%TYPE);

FUNCTION FindEmployee(EMP_ID EMPLOYEE.EMPLOYEE_ID%TYPE) RETURN EMPLOYEE%ROWTYPE;

END EMP_PKG;
/
-- Package Body for EMP_PKG -- 
CREATE OR REPLACE PACKAGE BODY EMP_PKG AS
-- Private Function that is used to valdite Location ID when adding a new Employee.
FUNCTION VALIDATE_LOC_ID(LOC_ID IN LOCATION.LOCATION_ID%TYPE) RETURN BOOLEAN 
IS
    v_temp PLS_INTEGER;
BEGIN
    SELECT 1 INTO v_temp FROM LOCATION WHERE LOCATION_ID = LOC_ID;
    RETURN TRUE;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN FALSE;
END VALIDATE_LOC_ID;

-- Public Procedure that is used to add new employees to the employee table.
PROCEDURE AddEmployee
(
EMP_CPR  EMPLOYEE.EMPLOYEE_CPR%TYPE,
EMP_FIRST_NAME  EMPLOYEE.EMPLOYEE_FIRST_NAME%TYPE,
EMP_LAST_NAME  EMPLOYEE.EMPLOYEE_LAST_NAME%TYPE,
EMP_DOB  EMPLOYEE.EMPLOYEE_DOB%TYPE DEFAULT SYSDATE,
EMP_PHONE_NUMBER  EMPLOYEE.EMPLOYEE_PHONE_NUMBER%TYPE DEFAULT 'N/A',
EMP_EMAIL  EMPLOYEE.EMPLOYEE_EMAIL%TYPE DEFAULT 'N/A',
EMP_BLD  EMPLOYEE.EMPLOYEE_BLD%TYPE DEFAULT 00000,
EMP_STREET  EMPLOYEE.EMPLOYEE_STREET%TYPE DEFAULT 'N/A',
EMP_BLOCK  EMPLOYEE.EMPLOYEE_BLOCK%TYPE DEFAULT 'N/A',
EMP_CITY  EMPLOYEE.EMPLOYEE_CITY%TYPE DEFAULT 'N/A',
LOC_ID  EMPLOYEE.LOCATION_ID%TYPE ,
EMP_HIRE_DATE  EMPLOYEE.EMPLOYEE_HIRE_DATE%TYPE DEFAULT SYSDATE,
JOB_TITLE  EMPLOYEE.JOB_TITLE%TYPE DEFAULT 'N/A',
EMP_SALARY  EMPLOYEE.EMPLOYEE_SALARY%TYPE    
) AS
BEGIN
    IF VALIDATE_LOC_ID(LOC_ID) THEN
        INSERT INTO EMPLOYEE VALUES (EmployeeID_SEQ.NEXTVAL,EMP_CPR,EMP_FIRST_NAME,EMP_LAST_NAME,EMP_DOB,
        EMP_PHONE_NUMBER,EMP_EMAIL,EMP_BLD,EMP_STREET,EMP_BLOCK,EMP_CITY,LOC_ID,EMP_HIRE_DATE,JOB_TITLE,EMP_SALARY,NULL);
        DBMS_OUTPUT.PUT_LINE('New Employee Record Added with the ID : ' || EmployeeID_SEQ.CURRVAL);
    ELSE
        RAISE_APPLICATION_ERROR (-20002, 'Invalid location ID.');
    END IF; 
END AddEmployee;

-- Public Procedure that takes Employee ID as parameter and Deletes the employee IF ID exists.
PROCEDURE DeleteEmployee(EMP_ID EMPLOYEE.EMPLOYEE_ID%TYPE)
AS
BEGIN
    DELETE FROM EMPLOYEE WHERE EMPLOYEE_ID = EMP_ID;
    IF SQL%NOTFOUND THEN
        RAISE_APPLICATION_ERROR (-20001, 'Employee Does not exist');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Employee ' || EMP_ID || ' Deleted!');
        COMMIT;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('SQL Error code: ' || SQLERRM);
END DeleteEmployee;

-- Public Function that takes Employee ID as an IN Parameter and returns an Employee Record if Employee exists else returns null.
FUNCTION FindEmployee(EMP_ID EMPLOYEE.EMPLOYEE_ID%TYPE) RETURN EMPLOYEE%ROWTYPE
IS
  EMP_RECORD EMPLOYEE%ROWTYPE;
BEGIN
    SELECT * INTO EMP_RECORD FROM EMPLOYEE
    WHERE EMPLOYEE_ID = EMP_ID;
    RETURN EMP_RECORD;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;
    DBMS_OUTPUT.PUT_LINE('Employee Does not exist');
END FindEmployee;


END EMP_PKG;
/



